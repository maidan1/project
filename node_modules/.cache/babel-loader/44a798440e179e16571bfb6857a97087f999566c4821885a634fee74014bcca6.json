{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maida\\\\OneDrive\\\\\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD\\\\project\\\\src\\\\layout\\\\LayoutComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport HeaderComponent from \"./header/HeaderComponent\";\nimport MainComponent from \"./main/MainComponent\";\nimport FooterComponent from \"./footer/FooterComponent\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { darkThemeActions } from \"../store/darkThemeSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LayoutComponent = ({\n  children\n}) => {\n  _s();\n  const [isDarkTheme, setIsDarkTheme] = useState(false);\n  const darkTheme = createTheme({\n    palette: {\n      mode: \"dark\"\n      // Define dark mode specific theme settings\n    }\n  });\n\n  const lightTheme = createTheme({\n    palette: {\n      mode: \"light\"\n      // Define light mode specific theme settings\n    }\n  });\n\n  const dispatch = useDispatch();\n\n  // Retrieve the theme mode from Redux store\n  const isReduxDarkTheme = useSelector(state => state.darkThemeSlice.darkTheme);\n\n  // Function to toggle and update theme\n  const handleThemeChange = () => {\n    const newTheme = !isDarkTheme;\n    setIsDarkTheme(newTheme);\n    dispatch(darkThemeActions.changeTheme(newTheme));\n\n    // Store the theme preference in local storage\n    localStorage.setItem(\"preferredTheme\", newTheme ? \"dark\" : \"light\");\n  };\n  useEffect(() => {\n    // Get the stored theme preference when the component mounts\n    const storedTheme = localStorage.getItem(\"preferredTheme\");\n    if (storedTheme) {\n      setIsDarkTheme(storedTheme === \"dark\");\n      dispatch(darkThemeActions.changeTheme(storedTheme === \"dark\"));\n    }\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: isDarkTheme ? darkTheme : lightTheme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HeaderComponent, {\n      isDarkTheme: isDarkTheme,\n      onThemeChange: handleThemeChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainComponent, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FooterComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(LayoutComponent, \"egy7HT8KCgUFDJuB2Bs0ySbnFcI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = LayoutComponent;\nexport default LayoutComponent;\nvar _c;\n$RefreshReg$(_c, \"LayoutComponent\");","map":{"version":3,"names":["React","useState","useEffect","ThemeProvider","createTheme","CssBaseline","HeaderComponent","MainComponent","FooterComponent","useDispatch","useSelector","darkThemeActions","jsxDEV","_jsxDEV","LayoutComponent","children","_s","isDarkTheme","setIsDarkTheme","darkTheme","palette","mode","lightTheme","dispatch","isReduxDarkTheme","state","darkThemeSlice","handleThemeChange","newTheme","changeTheme","localStorage","setItem","storedTheme","getItem","theme","fileName","_jsxFileName","lineNumber","columnNumber","onThemeChange","_c","$RefreshReg$"],"sources":["C:/Users/maida/OneDrive/מסמכים/project/src/layout/LayoutComponent.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport HeaderComponent from \"./header/HeaderComponent\";\nimport MainComponent from \"./main/MainComponent\";\nimport FooterComponent from \"./footer/FooterComponent\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { darkThemeActions } from \"../store/darkThemeSlice\";\n\nconst LayoutComponent = ({ children }) => {\n  const [isDarkTheme, setIsDarkTheme] = useState(false);\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: \"dark\",\n      // Define dark mode specific theme settings\n    },\n  });\n\n  const lightTheme = createTheme({\n    palette: {\n      mode: \"light\",\n      // Define light mode specific theme settings\n    },\n  });\n\n  const dispatch = useDispatch();\n\n  // Retrieve the theme mode from Redux store\n  const isReduxDarkTheme = useSelector((state) => state.darkThemeSlice.darkTheme);\n\n  // Function to toggle and update theme\n  const handleThemeChange = () => {\n    const newTheme = !isDarkTheme;\n    setIsDarkTheme(newTheme);\n    dispatch(darkThemeActions.changeTheme(newTheme));\n\n    // Store the theme preference in local storage\n    localStorage.setItem(\"preferredTheme\", newTheme ? \"dark\" : \"light\");\n  };\n\n  useEffect(() => {\n    // Get the stored theme preference when the component mounts\n    const storedTheme = localStorage.getItem(\"preferredTheme\");\n\n    if (storedTheme) {\n      setIsDarkTheme(storedTheme === \"dark\");\n      dispatch(darkThemeActions.changeTheme(storedTheme === \"dark\"));\n    }\n  }, [dispatch]);\n\n  return (\n    <ThemeProvider theme={isDarkTheme ? darkTheme : lightTheme}>\n      <CssBaseline />\n      <HeaderComponent\n        isDarkTheme={isDarkTheme}\n        onThemeChange={handleThemeChange}\n      />\n      <MainComponent>{children}</MainComponent>\n      <FooterComponent />\n    </ThemeProvider>\n  );\n};\n\nexport default LayoutComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,EAAEC,WAAW,QAAQ,sBAAsB;AACjE,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,eAAe,MAAM,0BAA0B;AACtD,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,eAAe,MAAM,0BAA0B;AACtD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,gBAAgB,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMkB,SAAS,GAAGf,WAAW,CAAC;IAC5BgB,OAAO,EAAE;MACPC,IAAI,EAAE;MACN;IACF;EACF,CAAC,CAAC;;EAEF,MAAMC,UAAU,GAAGlB,WAAW,CAAC;IAC7BgB,OAAO,EAAE;MACPC,IAAI,EAAE;MACN;IACF;EACF,CAAC,CAAC;;EAEF,MAAME,QAAQ,GAAGd,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMe,gBAAgB,GAAGd,WAAW,CAAEe,KAAK,IAAKA,KAAK,CAACC,cAAc,CAACP,SAAS,CAAC;;EAE/E;EACA,MAAMQ,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,QAAQ,GAAG,CAACX,WAAW;IAC7BC,cAAc,CAACU,QAAQ,CAAC;IACxBL,QAAQ,CAACZ,gBAAgB,CAACkB,WAAW,CAACD,QAAQ,CAAC,CAAC;;IAEhD;IACAE,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEH,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC;EACrE,CAAC;EAED1B,SAAS,CAAC,MAAM;IACd;IACA,MAAM8B,WAAW,GAAGF,YAAY,CAACG,OAAO,CAAC,gBAAgB,CAAC;IAE1D,IAAID,WAAW,EAAE;MACfd,cAAc,CAACc,WAAW,KAAK,MAAM,CAAC;MACtCT,QAAQ,CAACZ,gBAAgB,CAACkB,WAAW,CAACG,WAAW,KAAK,MAAM,CAAC,CAAC;IAChE;EACF,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;EAEd,oBACEV,OAAA,CAACV,aAAa;IAAC+B,KAAK,EAAEjB,WAAW,GAAGE,SAAS,GAAGG,UAAW;IAAAP,QAAA,gBACzDF,OAAA,CAACR,WAAW;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACfzB,OAAA,CAACP,eAAe;MACdW,WAAW,EAAEA,WAAY;MACzBsB,aAAa,EAAEZ;IAAkB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFzB,OAAA,CAACN,aAAa;MAAAQ,QAAA,EAAEA;IAAQ;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgB,CAAC,eACzCzB,OAAA,CAACL,eAAe;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEpB,CAAC;AAACtB,EAAA,CArDIF,eAAe;EAAA,QAiBFL,WAAW,EAGHC,WAAW;AAAA;AAAA8B,EAAA,GApBhC1B,eAAe;AAuDrB,eAAeA,eAAe;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}